[Anomalous Login Alert]
action.email = 1
action.email.message.alert = Anomalous Login Detected , check login behaviour for suspicious pattern
action.email.subject.alert = Alert : Anomaous login
action.email.to = srinivasbilluri2005@gmail.com
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = src_ip
alert.suppress.period = 60s
alert.track = 1
cron_schedule = * * * * *
description = Triggers when login behaviour matches known anomaly cluster
dispatch.earliest_time = rt
dispatch.latest_time = rt
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = login_anomaly_detection_app
request.ui_dispatch_view = search
search = index=main sourcetype="csv"\
| eval login_hour = tonumber(strftime(_time, "%H"))\
| stats count as total_logins,\
        dc(src) as unique_ips,\
        sum(eval(action="failure")) as failures\
        by user, login_hour\
| eval failure_ratio = failures / total_logins\
| apply login_anomaly_kmeans_model\
| where cluster = 0

[Impossible Travel Alert]
action.email = 1
action.email.message.alert = An Impossible travel login is detected .
action.email.subject.alert = Impossible Travel Detected
action.email.to = srinivasbilluri2005@gmail.com
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = src_ip
alert.suppress.period = 60s
alert.track = 1
cron_schedule = * * * * *
dispatch.earliest_time = rt
dispatch.latest_time = rt
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = login_anomaly_detection_app
request.ui_dispatch_view = search
search = index=main sourcetype="csv"\
| sort 0 user _time\
| streamstats current=f window=1 \
    last(_time) as prev_time, \
    last(country) as prev_country \
    by user\
| where isnotnull(prev_time) AND country != prev_country\
| eval time_diff_sec = (_time - prev_time)\
| eval travel_type = if(time_diff_sec < 3600, "Impossible Travel", "Unlikely Travel")\
| eval time_diff_human = tostring(time_diff_sec, "duration")\
| convert ctime(_time) AS _time\
| convert ctime(prev_time) AS prev_time\
| table user, _time, prev_time, country, prev_country, time_diff_sec, time_diff_human, travel_type
